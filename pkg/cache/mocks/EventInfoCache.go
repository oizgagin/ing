// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	rsvps "github.com/oizgagin/ing/pkg/rsvps"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// EventInfoCache is an autogenerated mock type for the EventInfoCache type
type EventInfoCache struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *EventInfoCache) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, eventID
func (_m *EventInfoCache) Get(ctx context.Context, eventID string) (rsvps.EventInfo, error) {
	ret := _m.Called(ctx, eventID)

	var r0 rsvps.EventInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (rsvps.EventInfo, error)); ok {
		return rf(ctx, eventID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) rsvps.EventInfo); ok {
		r0 = rf(ctx, eventID)
	} else {
		r0 = ret.Get(0).(rsvps.EventInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, eventID, info, ttl
func (_m *EventInfoCache) Set(ctx context.Context, eventID string, info rsvps.EventInfo, ttl time.Duration) error {
	ret := _m.Called(ctx, eventID, info, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, rsvps.EventInfo, time.Duration) error); ok {
		r0 = rf(ctx, eventID, info, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEventInfoCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventInfoCache creates a new instance of EventInfoCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventInfoCache(t mockConstructorTestingTNewEventInfoCache) *EventInfoCache {
	mock := &EventInfoCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
