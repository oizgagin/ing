// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/oizgagin/ing/pkg/db"
	mock "github.com/stretchr/testify/mock"

	rsvps "github.com/oizgagin/ing/pkg/rsvps"

	time "time"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEventInfo provides a mock function with given fields: ctx, eventID
func (_m *DB) GetEventInfo(ctx context.Context, eventID string) (rsvps.EventInfo, error) {
	ret := _m.Called(ctx, eventID)

	var r0 rsvps.EventInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (rsvps.EventInfo, error)); ok {
		return rf(ctx, eventID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) rsvps.EventInfo); ok {
		r0 = rf(ctx, eventID)
	} else {
		r0 = ret.Get(0).(rsvps.EventInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRSVP provides a mock function with given fields: ctx, rsvp
func (_m *DB) SaveRSVP(ctx context.Context, rsvp rsvps.RSVP) error {
	ret := _m.Called(ctx, rsvp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, rsvps.RSVP) error); ok {
		r0 = rf(ctx, rsvp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TopkEvents provides a mock function with given fields: ctx, date, k
func (_m *DB) TopkEvents(ctx context.Context, date time.Time, k uint) ([]db.TopkEvent, error) {
	ret := _m.Called(ctx, date, k)

	var r0 []db.TopkEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint) ([]db.TopkEvent, error)); ok {
		return rf(ctx, date, k)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint) []db.TopkEvent); ok {
		r0 = rf(ctx, date, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.TopkEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, uint) error); ok {
		r1 = rf(ctx, date, k)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDB(t mockConstructorTestingTNewDB) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
